s.corte <- cut(s.dendrogram, h=0.21)$upper # $upper to get useful information instead a forest
plot(s.corte)
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.ct, main = "HCluster")
}else{
s.final.cluster <- s.kmeans.vs.pam
if (s.kmeans.vs.pam.choose[1] == 'pam'){
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.pam$clustering, main = "PAM")
rgl.spheres(s.pam$medoids[, c("x", "y", "z")], r = 0.2, color = 1:4)
}else{
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.kmeans$cluster, main = "K-means")
rgl.spheres(s.kmeans$centers[, c("x", "y", "z")], r = 0.2, color = 1:4)
}
}
s.hclust.better.accuracy
s.kmeans.vs.pam
s.kmeans.vs.pam.choose
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 4)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.kmeans$cluster, main = "K-means")
rgl.spheres(s.kmeans$centers[, c("x", "y", "z")], r = 0.1, color = 1:4)
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 4)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.pam$clustering, main = "PAM")
rgl.spheres(s.pam$medoids[, c("x", "y", "z")], r = 0.2, color = 1:4)
?rgl.spheres
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.pam$clustering, main = "PAM")
rgl.spheres(s.pam$medoids[, c("x", "y", "z")], r = 0.1, color = 1:4)
?pamk()
package?fpc
?fpc
??fpc
install.packages("fpc")
?fpc
?pamk
??pamk
?kmeans
h.hclust.CM
s.kmeans.CM
s.kmeans.accuracy.CM
s.pam.CM
s.clase = function(numero){
# Selecting 3 clusters
if(numero < -1.0)
return(1)
else if(numero < .0)
return(2)
else
return(3)
}
s <- read.csv("s.csv")
names(s)[1] <- "x"
names(s)[2] <- "y"
names(s)[3] <- "z"
names(s)[4] <- "class"
plot3d(s$x, s$y, s$z)
for (i in 1:length(s$class)){
s$class[i] <- s.clase(s$class[i])
}
plot3d(s$x, s$y, s$z, col = s$class)
s.clase = function(numero){
# Selecting 3 clusters
if(numero < -1.0)
return(1)
else if(numero < 2.0)
return(2)
else
return(3)
}
for (i in 1:length(s$class)){
s$class[i] <- s.clase(s$class[i])
}
plot3d(s$x, s$y, s$z, col = s$class)
summary(s$class)
s <- read.csv("s.csv")
names(s)[1] <- "x"
names(s)[2] <- "y"
names(s)[3] <- "z"
names(s)[4] <- "class"
summary(s$class)
for (i in 1:length(s$class)){
s$class[i] <- s.clase(s$class[i])
}
summary(s$class)
plot3d(s$x, s$y, s$z, col = s$class)
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 4)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 4)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 4)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 4)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 4)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 4)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
s.pam <- pam(s[,1:3], 4)
s.pam.CM <- table(s.pam$clustering, s$class)
s.pam.accuracy.CM <- sum(diag(s.pam.CM))/sum(s.pam.CM)
s.pam.accuracy.CM
s.pam <- pam(s[,1:3], 4)
s.pam.CM <- table(s.pam$clustering, s$class)
s.pam.accuracy.CM <- sum(diag(s.pam.CM))/sum(s.pam.CM)
s.pam.accuracy.CM
s.num <- s # a copy of the dataframe
s.num$class <-NULL # Delete class column
s.num <- as.matrix(s.num) # convert into a matrix
s.hclust.better.accuracy <- 0
for (i in 1:length(dist_methods)){
for (j in 1:length(hclust_methods)){
s.dist.mat <- dist(s.num, method = dist_methods[i]) # distance matrix
s.cluster <- hclust(s.dist.mat, method = hclust_methods[j]) # apply method
s.ct <- cutree(s.cluster, k =4) # k to generate 4 clusters
s.hclust.CM <- table(as.factor(s$class), as.factor(s.ct))
s.hclust.accuracy.CM <- sum(diag(s.hclust.CM))/sum(s.hclust.CM)
if (s.hclust.accuracy.CM > s.hclust.better.accuracy){
s.better <- c(dist_methods[i], hclust_methods[j])
s.cluster.better <- s.cluster ##
s.ct.better <- s.ct ##
s.hclust.better.accuracy <- s.hclust.accuracy.CM
}
}
}
s.hclust.better.accuracy
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.ct.better, main = "HCluster")
s.hclust.better.accuracy <- 0
for (i in 1:length(dist_methods)){
for (j in 1:length(hclust_methods)){
s.dist.mat <- dist(s.num, method = dist_methods[i]) # distance matrix
s.cluster <- hclust(s.dist.mat, method = hclust_methods[j]) # apply method
s.ct <- cutree(s.cluster, k =3) # k to generate 4 clusters
s.hclust.CM <- table(as.factor(s$class), as.factor(s.ct))
s.hclust.accuracy.CM <- sum(diag(s.hclust.CM))/sum(s.hclust.CM)
if (s.hclust.accuracy.CM > s.hclust.better.accuracy){
s.better <- c(dist_methods[i], hclust_methods[j])
s.cluster.better <- s.cluster ##
s.ct.better <- s.ct ##
s.hclust.better.accuracy <- s.hclust.accuracy.CM
}
}
}
s.hclust.better.accuracy
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.ct.better, main = "HCluster")
mydata <- a
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
mydata <- moon
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
mydata <- h
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot3d(h$x, h$y, h$z, col = h$class)
mydata <- s
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot3d(s$x, s$y, s$z)
# codo de jambu (?)
c.jambu= function(d){
mydata <- d
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
}
c.jambu(h)
c.jambu= function(d){
mydata <- d
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares", main = d)
}
c.jambu(h)
c.jambu= function(d){
mydata <- d
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
}
c.jambu(h)
c.jambu(s)
s.clase = function(numero){
# Selecting 3 clusters
if(numero < 0.0)
return(1)
else
return(2)
}
s <- read.csv("s.csv")
names(s)[1] <- "x"
names(s)[2] <- "y"
names(s)[3] <- "z"
names(s)[4] <- "class"
for (i in 1:length(s$class)){
s$class[i] <- s.clase(s$class[i])
}
plot3d(s$x, s$y, s$z, col = s$class)
s <- read.csv("s.csv")
names(s)[1] <- "x"
names(s)[2] <- "y"
names(s)[3] <- "z"
names(s)[4] <- "class"
summary(s$class)
for (i in 1:length(s$class)){
s$class[i] <- s.clase(s$class[i])
}
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 2)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 2)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
s.kmeans.accuracy.CM <- 0
s.kmeans.better.accuracy.CM <- 0
for (i in 1:10){
s.kmeans <- kmeans(s[,c("x", "y", "z")], centers = 2)
s.kmeans.CM <- table(s.kmeans$cluster, s$class)
# comparing and choosing the best kmeans
s.kmeans.accuracy.CM <- sum(diag(s.kmeans.CM))/sum(s.kmeans.CM)
if (s.kmeans.accuracy.CM > s.kmeans.better.accuracy.CM){
s.kmeans.better <- s.kmeans
s.kmeans.better.accuracy.CM <- s.kmeans.accuracy.CM
}
}
s.kmeans <- s.kmeans.better
s.kmeans.better.accuracy.CM
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.kmeans$cluster, main = "K-means")
rgl.spheres(s.kmeans$centers[, c("x", "y", "z")], r = 0.1, color = 1:2)
s.pam <- pam(s[,1:3], 2)
s.pam.CM <- table(s.pam$clustering, s$class)
s.pam.accuracy.CM <- sum(diag(s.pam.CM))/sum(s.pam.CM)
s.pam.accuracy.CM
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.pam$clustering, main = "PAM")
rgl.spheres(s.pam$medoids[, c("x", "y", "z")], r = 0.1, color = 1:2)
s.num <- s # a copy of the dataframe
s.num$class <-NULL # Delete class column
s.num <- as.matrix(s.num) # convert into a matrix
s.hclust.better.accuracy <- 0
for (i in 1:length(dist_methods)){
for (j in 1:length(hclust_methods)){
s.dist.mat <- dist(s.num, method = dist_methods[i]) # distance matrix
s.cluster <- hclust(s.dist.mat, method = hclust_methods[j]) # apply method
s.ct <- cutree(s.cluster, k =2) # k to generate 4 clusters
s.hclust.CM <- table(as.factor(s$class), as.factor(s.ct))
s.hclust.accuracy.CM <- sum(diag(s.hclust.CM))/sum(s.hclust.CM)
if (s.hclust.accuracy.CM > s.hclust.better.accuracy){
s.better <- c(dist_methods[i], hclust_methods[j])
s.cluster.better <- s.cluster ##
s.ct.better <- s.ct ##
s.hclust.better.accuracy <- s.hclust.accuracy.CM
}
}
}
s.hclust.better.accuracy
s.better
s.dendrogram <- as.dendrogram(s.cluster.better)
plot(s.dendrogram) # dendrogram
rect.hclust(s.cluster.better, k = 4, border = c("cyan"))
s.corte <- cut(s.dendrogram, h=0.21)$upper # $upper to get useful information instead a forest
plot(s.corte)
plot(s.dendrogram) # dendrogram
rect.hclust(s.cluster.better, k = 4, border = c("cyan"))
s.corte <- cut(s.dendrogram, h=0.25)$upper # $upper to get useful information instead a forest
plot(s.corte)
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.ct.better, main = "HCluster")
if (s.hclust.better.accuracy > s.kmeans.vs.pam){
s.final.cluster <- s.hclust.better.accuracy
s.dist.mat <- dist(s.num, method = s.better[1]) # distance matrix
s.cluster <- hclust(s.dist.mat, method = s.better[2]) # apply method
s.ct <- cutree(s.cluster, k =4) # k to generate 4 clusters
s.dendrogram <- as.dendrogram(s.cluster.better)
plot(s.dendrogram) # dendrogram
rect.hclust(s.cluster.better, k = 4, border = c("cyan"))
s.corte <- cut(s.dendrogram, h=0.21)$upper # $upper to get useful information instead a forest
plot(s.corte)
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.ct, main = "HCluster")
}else{
s.final.cluster <- s.kmeans.vs.pam
if (s.kmeans.vs.pam.choose[1] == 'pam'){
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.pam$clustering, main = "PAM")
rgl.spheres(s.pam$medoids[, c("x", "y", "z")], r = 0.2, color = 1:4)
}else{
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.kmeans$cluster, main = "K-means")
rgl.spheres(s.kmeans$centers[, c("x", "y", "z")], r = 0.2, color = 1:4)
}
}
s.hclust.better.accuracy
s.kmeans.vs.pam
s.kmeans.vs.pam <- 0
if (s.kmeans.accuracy.CM >= s.pam.accuracy.CM){
s.kmeans.vs.pam <- s.kmeans.accuracy.CM
s.kmeans.vs.pam.choose <- c("kmeans")
}else{
s.kmeans.vs.pam <- s.pam.accuracy.CM
s.kmeans.vs.pam.choose <- c("pam")
}
s.kmeans.vs.pam
s.kmeans.vs.pam
s.kmeans.vs.pam.choose
s.kmeans.better.accuracy.CM
s.kmeans <- s.kmeans.better
s.kmeans.vs.pam <- 0
if (s.kmeans.accuracy.CM >= s.pam.accuracy.CM){
s.kmeans.vs.pam <- s.kmeans.accuracy.CM
s.kmeans.vs.pam.choose <- c("kmeans")
}else{
s.kmeans.vs.pam <- s.pam.accuracy.CM
s.kmeans.vs.pam.choose <- c("pam")
}
s.kmeans.vs.pam
s.kmeans.accuracy.CM
moon.kmeans.accuracy.CM <- moon.kmeans.better.accuracy.CM
s.kmeans.accuracy.CM <- s.kmeans.better.accuracy.CM
s.kmeans.vs.pam <- 0
if (s.kmeans.accuracy.CM >= s.pam.accuracy.CM){
s.kmeans.vs.pam <- s.kmeans.accuracy.CM
s.kmeans.vs.pam.choose <- c("kmeans")
}else{
s.kmeans.vs.pam <- s.pam.accuracy.CM
s.kmeans.vs.pam.choose <- c("pam")
}
s.kmeans.vs.pam.choose
if (s.hclust.better.accuracy > s.kmeans.vs.pam){
s.final.cluster <- s.hclust.better.accuracy
s.dist.mat <- dist(s.num, method = s.better[1]) # distance matrix
s.cluster <- hclust(s.dist.mat, method = s.better[2]) # apply method
s.ct <- cutree(s.cluster, k =4) # k to generate 4 clusters
s.dendrogram <- as.dendrogram(s.cluster.better)
plot(s.dendrogram) # dendrogram
rect.hclust(s.cluster.better, k = 4, border = c("cyan"))
s.corte <- cut(s.dendrogram, h=0.21)$upper # $upper to get useful information instead a forest
plot(s.corte)
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.ct, main = "HCluster")
}else{
s.final.cluster <- s.kmeans.vs.pam
if (s.kmeans.vs.pam.choose[1] == 'pam'){
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.pam$clustering, main = "PAM")
rgl.spheres(s.pam$medoids[, c("x", "y", "z")], r = 0.2, color = 1:4)
}else{
rgl.open()
rgl.bg(color = "white") # Setup the background color
plot3d(s$x, s$y, s$z, col = s.kmeans$cluster, main = "K-means")
rgl.spheres(s.kmeans$centers[, c("x", "y", "z")], r = 0.2, color = 1:4)
}
}
s.final.cluster
a_big <- read.csv("a_big.csv")
dim(a_big)
summary(a_big)
names(a_big)[1] <- "x"
names(a_big)[2] <- "y"
names(a_big)[3] <- "class"
(a_big)
summary(a_big)
plot(a$x, a$y, col=1:3)
plot(a_big$x, a_big$y)
plot(a_big$x, a_big$y)
plot(a_big$x, a_big$y, col = 1:3)
c.jambu(a_big)
